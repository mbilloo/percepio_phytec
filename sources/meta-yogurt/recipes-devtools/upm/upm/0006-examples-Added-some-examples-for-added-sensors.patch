From 6db5c713885b02f5417a532ac2ac6b4fcaa6c75a Mon Sep 17 00:00:00 2001
From: Norbert Wesp <nwesp@phytec.de>
Date: Fri, 10 Feb 2017 14:51:40 +0100
Subject: [PATCH] examples: Added some examples for added sensors

For each added sensor I wrote an c++ and python example:
Sensors: HDC1000, MAG3110, MMA8X5X, TCS37727, TMP006
I also added these examples in doxy/samples.mapping.txt
and added the .cxx-examples to the examples/c++/CMakeLists.txt.

Signed-off-by: Norbert Wesp <nwesp@phytec.de>
---
 doxy/samples.mapping.txt    |  5 +++
 examples/c++/CMakeLists.txt |  5 +++
 examples/c++/hdc1000.cxx    | 67 +++++++++++++++++++++++++++++++++
 examples/c++/mag3110.cxx    | 76 +++++++++++++++++++++++++++++++++++++
 examples/c++/mma8x5x.cxx    | 91 +++++++++++++++++++++++++++++++++++++++++++++
 examples/c++/tcs37727.cxx   | 77 ++++++++++++++++++++++++++++++++++++++
 examples/c++/tmp006.cxx     | 69 ++++++++++++++++++++++++++++++++++
 examples/python/hdc1000.py  | 57 ++++++++++++++++++++++++++++
 examples/python/mag3110.py  | 62 ++++++++++++++++++++++++++++++
 examples/python/mma8x5x.py  | 62 ++++++++++++++++++++++++++++++
 examples/python/tcs37727.py | 63 +++++++++++++++++++++++++++++++
 examples/python/tmp006.py   | 60 ++++++++++++++++++++++++++++++
 12 files changed, 694 insertions(+)
 create mode 100644 examples/c++/hdc1000.cxx
 create mode 100644 examples/c++/mag3110.cxx
 create mode 100644 examples/c++/mma8x5x.cxx
 create mode 100644 examples/c++/tcs37727.cxx
 create mode 100644 examples/c++/tmp006.cxx
 create mode 100644 examples/python/hdc1000.py
 create mode 100644 examples/python/mag3110.py
 create mode 100644 examples/python/mma8x5x.py
 create mode 100644 examples/python/tcs37727.py
 create mode 100644 examples/python/tmp006.py

diff --git a/doxy/samples.mapping.txt b/doxy/samples.mapping.txt
index 492c967..e4231a3 100644
--- a/doxy/samples.mapping.txt
+++ b/doxy/samples.mapping.txt
@@ -71,3 +71,8 @@ vdiv.cxx	VDivSample.java	vdiv.js	vdiv.py
 water.cxx	WaterSample.java	water.js	water.py
 wt5001.cxx	WT5001Sample.java	wt5001.js	wt5001.py
 yg1006.cxx	YG1006Sample.java	yg1006.js	yg1006.py
+hdc1000.cxx hdc1000.py
+mag3110.cxx mag3110.py
+mma8x5x.cxx mma8x5x.py
+tcs37727.cxx tcs37727.py
+tmp006.cxx tmp006.py
diff --git a/examples/c++/CMakeLists.txt b/examples/c++/CMakeLists.txt
index f2e5e55..85cd4cf 100644
--- a/examples/c++/CMakeLists.txt
+++ b/examples/c++/CMakeLists.txt
@@ -329,6 +329,11 @@ add_example (rf22-server)
 add_example (rf22-client)
 add_example (mcp2515)
 add_example (max30100)
+add_example (hdc1000)
+add_example (mag3110)
+add_example (mma8x5x)
+add_example (tcs37727)
+add_example (tmp006)
 
 # These are special cases where you specify example binary, source file and module(s)
 include_directories (${PROJECT_SOURCE_DIR}/src)
diff --git a/examples/c++/hdc1000.cxx b/examples/c++/hdc1000.cxx
new file mode 100644
index 0000000..a05d998
--- /dev/null
+++ b/examples/c++/hdc1000.cxx
@@ -0,0 +1,67 @@
+/* Author: Norbert Wesp <nwesp@phytec.de>
+ * Copyright (c) 2017 Phytec Messtechnik GmbH.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <unistd.h>
+#include <iostream>
+#include <signal.h>
+
+#include "hdc1000.hpp"
+
+using namespace upm;
+
+bool run = true;
+
+void sig_handler(int sig)
+{
+  if (sig == SIGINT)
+    run = false;
+}
+
+int main(int argc, char **argv)
+{
+  signal(SIGINT, sig_handler);
+
+//! [Interesting]
+  cout << "Initializing test-application..." << endl;
+
+  // Instantiate an HDC1000 instance on bus 1
+  upm::HDC1000 *mySensor = new upm::HDC1000(1);
+
+  // update and print available values every second
+  while (run)
+    {
+        cout << "Humidity: " << mySensor->getHumidity(true) << endl
+             << "Temperature: " << mySensor->getTemperature(true) << endl;
+
+        cout << endl;
+
+      	sleep(1);
+    }
+
+  cout << "Exiting test-application..." << endl;
+
+  delete mySensor;
+//! [Interesting]
+
+  return 0;
+}
\ No newline at end of file
diff --git a/examples/c++/mag3110.cxx b/examples/c++/mag3110.cxx
new file mode 100644
index 0000000..096d33d
--- /dev/null
+++ b/examples/c++/mag3110.cxx
@@ -0,0 +1,76 @@
+/* Author: Norbert Wesp <nwesp@phytec.de>
+ * Copyright (c) 2017 Phytec Messtechnik GmbH.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <unistd.h>
+#include <iostream>
+#include <signal.h>
+
+#include "mag3110.hpp"
+
+using namespace upm;
+
+bool run = true;
+
+void sig_handler(int sig)
+{
+  if (sig == SIGINT)
+    run = false;
+}
+
+int main(int argc, char **argv)
+{
+  signal(SIGINT, sig_handler);
+
+//! [Interesting]
+  upm::mag3110_data_t data;
+
+  cout << "Initializing test-application..." << endl;
+
+  // Instantiate an MAG3110 instance on bus 1
+  upm::MAG3110 *mySensor = new upm::MAG3110(1);
+
+  // activate periodic measurements
+  mySensor->setActive();
+
+  // update and print available values every second
+  while (run)
+    {
+    	mySensor->getData (&data, true);
+        cout << "x: " << data.x << endl
+             << "y: " << data.y << endl
+             << "z: " << data.z << endl
+             << "Status: " << data.status << endl
+             << "Die temperature: " << data.dtemp << endl;
+
+        cout << endl;
+
+      	sleep(1);
+    }
+
+  cout << "Exiting test-application..." << endl;
+
+  delete mySensor;
+//! [Interesting]
+
+  return 0;
+}
\ No newline at end of file
diff --git a/examples/c++/mma8x5x.cxx b/examples/c++/mma8x5x.cxx
new file mode 100644
index 0000000..16c5557
--- /dev/null
+++ b/examples/c++/mma8x5x.cxx
@@ -0,0 +1,91 @@
+/* Author: Norbert Wesp <nwesp@phytec.de>
+ * Copyright (c) 2017 Phytec Messtechnik GmbH.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <unistd.h>
+#include <iostream>
+#include <signal.h>
+
+#include "mma8x5x.hpp"
+
+using namespace upm;
+
+bool run = true;
+
+void sig_handler(int sig)
+{
+  if (sig == SIGINT)
+    run = false;
+}
+
+int main(int argc, char **argv)
+{
+  signal(SIGINT, sig_handler);
+
+//! [Interesting]
+  upm::mma8x5x_data_t data;
+
+  // U can set your own parameters for an MMA8X5X instance with
+  /*
+  	upm::mma8x5x_params_t params;
+  	params.type 	= <device-id>;			device-id of your sensor
+  	params.rate 	= <sampling-rate>;		between 0<<3 and 7<<3
+  	params.range 	= <range>;				between 0 and 2
+  	params.offsetX 	= <x-axis offset>;		between 0 and 255
+  	params.offsetY 	= <y-axis offset>;		between 0 and 255
+  	params.offsetZ 	= <z-axis offset>;		between 0 and 255
+  */
+
+  cout << "Initializing test-application..." << endl;
+
+  // Instantiate an MMA8X5X instance on bus 1 with default parameters
+  // The sensor-type will be detected by reading out the device-id
+  upm::MMA8X5X *mySensor = new upm::MMA8X5X(1);
+
+  // If u have set own parameters use this one
+  /*
+  	upm::MMA8X5X *mySensor = new upm::MMA8X5X(1, &params);
+  */
+
+  // activate periodic measurements
+  mySensor->setActive();
+
+  // update and print available values every second
+  while (run)
+    {
+    	mySensor->getData (&data, true);
+        cout << "x: " << (int)data.x << endl
+             << "y: " << (int)data.y << endl
+             << "z: " << (int)data.z << endl;
+
+        cout << endl;
+
+      	sleep(1);
+    }
+
+  cout << "Exiting test-application..." << endl;
+
+  delete mySensor;
+//! [Interesting]
+
+  return 0;
+}
\ No newline at end of file
diff --git a/examples/c++/tcs37727.cxx b/examples/c++/tcs37727.cxx
new file mode 100644
index 0000000..293bcea
--- /dev/null
+++ b/examples/c++/tcs37727.cxx
@@ -0,0 +1,77 @@
+/* Author: Norbert Wesp <nwesp@phytec.de>
+ * Copyright (c) 2017 Phytec Messtechnik GmbH.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <unistd.h>
+#include <iostream>
+#include <signal.h>
+
+#include "tcs37727.hpp"
+
+using namespace upm;
+
+bool run = true;
+
+void sig_handler(int sig)
+{
+  if (sig == SIGINT)
+    run = false;
+}
+
+int main(int argc, char **argv)
+{
+  signal(SIGINT, sig_handler);
+
+//! [Interesting]
+  upm::tcs37727_data_t data;
+
+  cout << "Initializing test-application..." << endl;
+
+  // Instantiate an TCS37727 instance on bus 1
+  upm::TCS37727 *mySensor = new upm::TCS37727(1);
+
+  // activate periodic measurements
+  mySensor->setActive();
+
+  // update and print available values every second
+  while (run)
+    {
+    	mySensor->getData (&data, true);
+        cout << "Red: " << (int)data.red << endl
+             << "Green: " << (int)data.green << endl
+             << "Blue: " << (int)data.blue << endl
+             << "Clear: " << (int)data.clear << endl
+             << "Lux: " << (int)data.lux << endl
+             << "Color temperature: " << (int)data.ct << endl;
+
+        cout << endl;
+
+      	sleep(1);
+    }
+
+  cout << "Exiting test-application..." << endl;
+
+  delete mySensor;
+//! [Interesting]
+
+  return 0;
+}
diff --git a/examples/c++/tmp006.cxx b/examples/c++/tmp006.cxx
new file mode 100644
index 0000000..fda1dd7
--- /dev/null
+++ b/examples/c++/tmp006.cxx
@@ -0,0 +1,69 @@
+/* Author: Norbert Wesp <nwesp@phytec.de>
+ * Copyright (c) 2017 Phytec Messtechnik GmbH.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <unistd.h>
+#include <iostream>
+#include <signal.h>
+
+#include "tmp006.hpp"
+
+using namespace upm;
+
+bool run = true;
+
+void sig_handler(int sig)
+{
+  if (sig == SIGINT)
+    run = false;
+}
+
+int main(int argc, char **argv)
+{
+  signal(SIGINT, sig_handler);
+
+//! [Interesting]
+  cout << "Initializing test-application..." << endl;
+
+  // Instantiate an TMP006 instance on bus 1
+  upm::TMP006 *mySensor = new upm::TMP006(1);
+
+  // activate periodic measurements
+  mySensor->setActive();
+
+  // update and print available values every second
+  while (run)
+    {
+      // Print out temperature value in °C
+      cout << "Temperature: " << mySensor->getTemperature(true) << " °C"
+           << endl;
+
+      sleep(1);
+    }
+
+  cout << "Exiting test-application..." << endl;
+
+  delete mySensor;
+//! [Interesting]
+
+  return 0;
+}
diff --git a/examples/python/hdc1000.py b/examples/python/hdc1000.py
new file mode 100644
index 0000000..9ab3b5b
--- /dev/null
+++ b/examples/python/hdc1000.py
@@ -0,0 +1,57 @@
+#!/usr/bin/python
+# Author: Norbert Wesp <nwesp@phytec.de>
+# Copyright (c) 2017 Phytec Messtechnik GmbH.
+#
+# based on: tcs3414cs.py
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+from __future__ import print_function
+import time, sys, signal, atexit
+from upm import pyupm_hdc1000 as HDC1000
+
+def main():
+    # Instantiate the Temperature and Humidity Sensor on I2C on bus 1
+    mySensor = HDC1000.HDC1000(1)
+
+    ## Exit handlers ##
+    # This stops python from printing a stacktrace when you hit control-C
+    def SIGINTHandler(signum, frame):
+        raise SystemExit
+
+    # This lets you run code on exit,
+    # including functions from mySensor
+    def exitHandler():
+        print("Exiting")
+        sys.exit(0)
+
+    # Register exit handlers
+    atexit.register(exitHandler)
+    signal.signal(signal.SIGINT, SIGINTHandler)
+
+    # Print out the humidity and temperature value every 0.5 seconds
+    while(1):
+        mySensor.getHumidity(True)
+        mySensor.getTemperature(True)
+
+        time.sleep(.5)
+
+if __name__ == '__main__':
+    main()
diff --git a/examples/python/mag3110.py b/examples/python/mag3110.py
new file mode 100644
index 0000000..8e64d4b
--- /dev/null
+++ b/examples/python/mag3110.py
@@ -0,0 +1,62 @@
+#!/usr/bin/python
+# Author: Norbert Wesp <nwesp@phytec.de>
+# Copyright (c) 2017 Phytec Messtechnik GmbH.
+#
+# based on: tcs3414cs.py
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+from __future__ import print_function
+import time, sys, signal, atexit
+from upm import pyupm_mag3110 as MAG3110
+
+def main():
+    # Instantiate the Three-Axis Digital Magnetometer Sensor on I2C on bus 1
+    mySensor = MAG3110.MAG3110(1)
+
+    ## Exit handlers ##
+    # This stops python from printing a stacktrace when you hit control-C
+    def SIGINTHandler(signum, frame):
+        raise SystemExit
+
+    # This lets you run code on exit,
+    # including functions from mySensor
+    def exitHandler():
+        print("Exiting")
+        sys.exit(0)
+
+    # Register exit handlers
+    atexit.register(exitHandler)
+    signal.signal(signal.SIGINT, SIGINTHandler)
+
+    data = MAG3110.mag3110_data_t()
+
+    # activate periodic measurements
+    mySensor.setActive();
+
+    # Print out the x, y, z, status and die temperature value every 0.5 seconds
+    while(1):
+        mySensor.getData(data, True)
+        print(data.x, data.y, data.z, hex(data.status), data.dtemp)
+
+        time.sleep(.5)
+
+if __name__ == '__main__':
+    main()
diff --git a/examples/python/mma8x5x.py b/examples/python/mma8x5x.py
new file mode 100644
index 0000000..51bb962
--- /dev/null
+++ b/examples/python/mma8x5x.py
@@ -0,0 +1,62 @@
+#!/usr/bin/python
+# Author: Norbert Wesp <nwesp@phytec.de>
+# Copyright (c) 2017 Phytec Messtechnik GmbH.
+#
+# based on: tcs3414cs.py
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+from __future__ import print_function
+import time, sys, signal, atexit
+from upm import pyupm_mma8x5x as MMA8X5X
+
+def main():
+    # Instantiate the Three-Axis Accelerometer Sensor on I2C on bus 1
+    mySensor = MMA8X5X.MMA8X5X(1)
+
+    ## Exit handlers ##
+    # This stops python from printing a stacktrace when you hit control-C
+    def SIGINTHandler(signum, frame):
+        raise SystemExit
+
+    # This lets you run code on exit,
+    # including functions from mySensor
+    def exitHandler():
+        print("Exiting")
+        sys.exit(0)
+
+    # Register exit handlers
+    atexit.register(exitHandler)
+    signal.signal(signal.SIGINT, SIGINTHandler)
+
+    data = MMA8X5X.mma8x5x_data_t()
+
+    # activate periodic measurements
+    mySensor.setActive();
+
+    # Print out the x, y, z value every 0.5 seconds
+    while(1):
+        mySensor.getData(data, True)
+        print(data.x, data.y, data.z)
+
+        time.sleep(.5)
+
+if __name__ == '__main__':
+    main()
diff --git a/examples/python/tcs37727.py b/examples/python/tcs37727.py
new file mode 100644
index 0000000..f9a881d
--- /dev/null
+++ b/examples/python/tcs37727.py
@@ -0,0 +1,63 @@
+#!/usr/bin/python
+# Author: Norbert Wesp <nwesp@phytec.de>
+# Copyright (c) 2017 Phytec Messtechnik GmbH.
+#
+# based on: tcs3414cs.py
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+from __future__ import print_function
+import time, sys, signal, atexit
+from upm import pyupm_tcs37727 as TCS37727
+
+def main():
+    # Instantiate the color sensor on I2C on bus 1
+    mySensor = TCS37727.TCS37727(1)
+
+    ## Exit handlers ##
+    # This stops python from printing a stacktrace when you hit control-C
+    def SIGINTHandler(signum, frame):
+        raise SystemExit
+
+    # This lets you run code on exit,
+    # including functions from mySensor
+    def exitHandler():
+        print("Exiting")
+        sys.exit(0)
+
+    # Register exit handlers
+    atexit.register(exitHandler)
+    signal.signal(signal.SIGINT, SIGINTHandler)
+
+    data = TCS37727.tcs37727_data_t()
+
+    # activate periodic measurements
+    mySensor.setActive();
+
+    # Print out the red, green, blue, clear, lux and color-temperature value
+    # every 0.5 seconds
+    while(1):
+        mySensor.getData(data, True)
+        print(data.red, data.green, data.blue, data.clear, data.lux, data.ct)
+
+        time.sleep(.5)
+
+if __name__ == '__main__':
+    main()
diff --git a/examples/python/tmp006.py b/examples/python/tmp006.py
new file mode 100644
index 0000000..d75e54a
--- /dev/null
+++ b/examples/python/tmp006.py
@@ -0,0 +1,60 @@
+#!/usr/bin/python
+# Author: Norbert Wesp <nwesp@phytec.de>
+# Copyright (c) 2017 Phytec Messtechnik GmbH.
+#
+# based on: tcs3414cs.py
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+from __future__ import print_function
+import time, sys, signal, atexit
+from upm import pyupm_tmp006 as TMP006
+
+def main():
+    # Instantiate the Infrared-Thermopile Sensor on I2C on bus 1
+    mySensor = TMP006.TMP006(1)
+
+    ## Exit handlers ##
+    # This stops python from printing a stacktrace when you hit control-C
+    def SIGINTHandler(signum, frame):
+        raise SystemExit
+
+    # This lets you run code on exit,
+    # including functions from mySensor
+    def exitHandler():
+        print("Exiting")
+        sys.exit(0)
+
+    # Register exit handlers
+    atexit.register(exitHandler)
+    signal.signal(signal.SIGINT, SIGINTHandler)
+
+    # activate periodic measurements
+    mySensor.setActive();
+
+    # Print out temperature value and config-reg in hex every 0.5 seconds
+    while(1):
+        mySensor.getTemperature(True)
+        hex(mySensor.getConfig())
+
+        time.sleep(.5)
+
+if __name__ == '__main__':
+    main()
-- 
1.9.1

